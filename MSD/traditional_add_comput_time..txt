#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include "xtime_l.h"

#define NUM_BINARIES 60
#define MAX_BIT_LENGTH 34

// 十进制转二进制  数组低位存二进制低位
void decimal_to_binary(long long decimal_num, int binary_num[][MAX_BIT_LENGTH], int index)
{
    for (int i = 0; i < MAX_BIT_LENGTH; i++)
    {
        binary_num[index][i] = decimal_num % 2;
        decimal_num /= 2;
    }
}

void binary_to_decimal(int binary[][MAX_BIT_LENGTH], long long *result, int index)
{
    long long decimal = 0;
    for (int i = 0; i < MAX_BIT_LENGTH; ++i)
    {
        long long binary_bit = binary[index][i]; // 获取当前位的二进制值
        if (binary_bit)
        {
            decimal += (1LL << i); // 将当前位的二进制值乘以对应的 2 的次方，并累加到十进制数中
        }
    }
    result[index] = decimal;
}
void binary_add(int binary1[][MAX_BIT_LENGTH], int binary2[][MAX_BIT_LENGTH], int result_binary[][MAX_BIT_LENGTH], int index)
{
    int carry = 0;
    for (int i = 0; i < MAX_BIT_LENGTH; i++)
    {
        int sum = binary1[index][i] + binary2[index][i] + carry;
        result_binary[index][i] = sum % 2;
        carry = sum / 2;
    }
}

long long *generate_random_array(long long *array, int size, int random_seed)
{
    long long lower_bound = (1LL << 32) - 1; // 2^32 - 1
    long long upper_bound = (1LL << 33) - 1; // 2^33 - 1
    srand(random_seed);

    // 生成随机数并存储在数组中
    for (int i = 0; i < size; ++i)
    {
        array[i] = ((long long)rand() % (upper_bound - lower_bound + 1)) + lower_bound;
    }

    return array;
}
void printArray(int array[][34], int rows, int cols)
{
    for (int i = 0; i < rows; ++i)
    {
        for (int j = 0; j < cols; ++j)
        {
            printf("%d", array[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    long long array_a[NUM_BINARIES];
    long long array_b[NUM_BINARIES];
    int(*bin_nums_a)[MAX_BIT_LENGTH] = malloc(NUM_BINARIES * sizeof(*bin_nums_a));
    int bin_nums_b[NUM_BINARIES][MAX_BIT_LENGTH]={{0}};
    int(*bin_result)[MAX_BIT_LENGTH] = malloc(NUM_BINARIES * sizeof(*bin_result));
    XTime tEnd, tbegin;
    u32 tused;

    for (int i = 0; i < NUM_BINARIES; i++) {
        for (int j = 0; j < MAX_BIT_LENGTH; j++) {
            bin_nums_a[i][j] = 0;
            bin_nums_b[i][j] = 0;
            bin_result[i][j] = 0;
        }
    }

    long long dec_result[NUM_BINARIES]={0};
    // 生成60个随机的二进制数
    long long *data_a = generate_random_array(array_a, NUM_BINARIES, 123);
    long long *data_b = generate_random_array(array_b, NUM_BINARIES, 456);



    for (int i = 0; i < NUM_BINARIES; i++)
    {
        decimal_to_binary(data_a[i], bin_nums_a, i);
        decimal_to_binary(data_b[i], bin_nums_b, i);
    }


    XTime_GetTime(&tbegin);
    for (int i = 0; i < NUM_BINARIES; i++)
    {
        binary_add(bin_nums_a, bin_nums_b, bin_result, i);
    }
	XTime_GetTime(&tEnd);
    tused = ((tEnd-tbegin)*1000000)/(COUNTS_PER_SECOND);

    for (int i = 0; i < NUM_BINARIES; i++)
    {
        binary_to_decimal(bin_result, dec_result, i);
    }

    for (int i = 0; i < 60; i++)
    {
        printf("%lld + %lld = %lld   ", data_a[i], data_b[i], dec_result[i]);
        if ((i + 1) % 2 == 0)
        {
            printf("\n");
        }
    }
	xil_printf("%d traditional additions ,time elapsed is %d us\r\n",NUM_BINARIES,tused);
	float tused_float = (float)tused / 60.0;
	printf("average time per traditional addition is  %f\n", tused_float);
    free(bin_nums_a);
    free(bin_result);
    return 0;
}
